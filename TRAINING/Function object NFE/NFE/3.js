"use strict";
/* Почему мы используем func? Почему просто не использовать sayHi для вложенного вызова?
Вообще, обычно мы можем так поступить:
let sayHi = function(who) {
  if (who) {
    alert(`Hello, ${who}`);
  } else {
    sayHi("Guest");
  }
};

Однако, у этого кода есть проблема, которая заключается в том, что значение sayHi может быть изменено. 
Функция может быть присвоена другой переменной, и тогда код начнёт выдавать ошибки:
*/
let sayHi = function(who) {
    if (who) {
      console.log(`Hello, ${who}`);
    } else {
      sayHi("Guest"); // Ошибка: sayHi не является функцией
    }
  };
  
  let welcome = sayHi;
  sayHi = null;
  
  welcome(); // Ошибка, вложенный вызов sayHi больше не работает!

  /*Так происходит, потому что функция берёт sayHi из внешнего лексического окружения. Так как локальная переменная sayHi отсутствует, используется внешняя. И на момент вызова эта внешняя sayHi равна null.

Необязательное имя, которое можно вставить в Function Expression, как раз и призвано решать такого рода проблемы.*/